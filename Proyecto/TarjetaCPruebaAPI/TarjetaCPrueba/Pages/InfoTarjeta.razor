@page "/infotarjeta/{userId:int}"
@using System.Text.Json
@using TarjetaCPruebaAPI.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Información de la Tarjeta de Crédito</h3>
<br />

@if (userStatement is null)
{
    <p><em>Cargando datos...</em></p>
}
else
{
    <div>
        <p><strong>Nombre del Cliente:</strong> @userStatement.CustomerName</p>
        <p><strong>Número de Tarjeta:</strong> @HideCardNumberMiddleDigits(userStatement.CreditCardNumber)</p>
        <p><strong>Saldo Actual:</strong> @($"${userStatement.CardBalance:F2}")</p>
        <p><strong>Límite de Crédito:</strong> @($"${userStatement.CardLimit:F2}")</p>
        <p><strong>Saldo Disponible:</strong> @($"${userStatement.AvailableBalance:F2}")</p>
        <br />
    </div>

    <h4>Transacciones</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Fecha y Hora</th>
                <th>Descripción</th>
                <th>Monto</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in userStatement.TransactionStatements.OrderByDescending(t => t.TransactionDate))
            {
                <tr>
                    <td>@transaction.TransactionDate.Value.ToString("g")</td>
                    <td>@transaction.TransactionDescription</td>
                    <td>@($"${transaction.TransactionAmount:F2}")</td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    [Parameter]
    public int UserId { get; set; }

    private Statement? userStatement;
    private int SelectedCardId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            userStatement = await HttpClient.GetFromJsonAsync<Statement>($"https://localhost:7047/api/users/userStatement?userId={UserId}") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
        }
    }

    private string HideCardNumberMiddleDigits(string cardNumber)
    {
        if (string.IsNullOrEmpty(cardNumber) || cardNumber.Length != 16)
        {
            return cardNumber;
        }

        int visibleDigits = 6; // Mostrar los primeros 6 y últimos 4 dígitos
        string hiddenPart = new string('*', 4); // Ocultar los 4 dígitos intermedios
        string visiblePart = cardNumber.Substring(0, 6) + hiddenPart + cardNumber.Substring(10, 4);

        return visiblePart;
    }
}

